name: 'Terraform'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  ARM_USE_OIDC: true
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_USE_AZUREAD: true
  TF_CLI_ARGS_plan: "-lock-timeout=5m"
  TF_CLI_ARGS_apply: "-lock-timeout=5m"
  TF_WORKSPACE: "dev"
  # Backend Configuration
  TF_VAR_backend_resource_group: "rg-terraform-backend"
  TF_VAR_backend_container_name: "container-tfstate"
  TF_VAR_backend_key: "dev.terraform.tfstate"
  # Terraform Variables from Secrets
  TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
  TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  TF_VAR_storage_account_name: ${{ secrets.STORAGE_ACCOUNT_NAME }}
  TF_VAR_container_name: ${{ secrets.CONTAINER_NAME }}

jobs:
  terraform:
    name: 'Terraform'
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    environment: dev

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure OIDC Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true
    
    # Run az commands to confirm sub access
    - name: Azure CLI script
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account show
          # Verify backend storage access
          az storage container exists --name container-tfstate --account-name $(az storage account list -g rg-terraform-backend --query "[0].name" -o tsv) --auth-mode login

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      env:
        ARM_USE_AZUREAD: true
        ARM_USE_OIDC: true      
      with:
        terraform_version: "1.7.0"
        terraform_wrapper: false

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        echo "Cleaning up any existing Terraform files..."
        rm -rf .terraform
        rm -f .terraform.lock.hcl

        for i in {1..3}; do
          echo "Attempt $i: Initializing Terraform..."
          # First try normal init
          if terraform init; then
            echo "Normal init successful"
            break
          fi
          
          echo "Normal init failed, trying with reconfigure..."
          # If normal init fails, try with reconfigure
          if terraform init -reconfigure; then
            echo "Reconfigure init successful"
            break
          fi
          
          if [ $i -eq 3 ]; then
            echo "Failed to initialize after 3 attempts"
            exit 1
          fi
          echo "Retrying initialization in 30 seconds..."
          sleep 30
        done
      working-directory: environments/${{ env.TF_WORKSPACE }}

    - name: Terraform Validate
      id: validate
      run: terraform validate
      working-directory: environments/${{ env.TF_WORKSPACE }}

    - name: Terraform Plan
      id: plan
      run: |
        for i in {1..3}; do
          terraform plan -no-color && break
          if [ $i -eq 3 ]; then
            echo "Failed to plan after 3 attempts"
            exit 1
          fi
          echo "Retrying plan in 30 seconds..."
          sleep 30
        done
      working-directory: environments/${{ env.TF_WORKSPACE }}
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        for i in {1..3}; do
          terraform apply -auto-approve && break
          if [ $i -eq 3 ]; then
            echo "Failed to apply after 3 attempts"
            exit 1
          fi
          echo "Retrying apply in 30 seconds..."
          sleep 30
        done
      working-directory: environments/${{ env.TF_WORKSPACE }} 